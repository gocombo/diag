package main

import (
	"fmt"

	. "github.com/dave/jennifer/jen"
)

func main() {
	f := NewFile("diag")
	f.HeaderComment("Code generated by ./cmd/generate-zerolog; DO NOT EDIT.")

	f.Comment("MsgData fields functions").Line()

	type fieldFunctionsDef struct {
		loggerFn     string
		zerologField string
		valueType    *Statement
	}

	fieldFunctions := []fieldFunctionsDef{
		{loggerFn: "Str", valueType: String()},
		{loggerFn: "Strs", valueType: Index().String()},
		{loggerFn: "Stringer", valueType: Qual("fmt", "Stringer")},
		{loggerFn: "Bytes", valueType: Index().Byte()},
		{loggerFn: "Hex", valueType: Index().Byte()},
		{loggerFn: "RawJSON", valueType: Index().Byte()},
		{loggerFn: "Bool", valueType: Bool()},
		{loggerFn: "Bools", valueType: Index().Bool()},
		{loggerFn: "Int", valueType: Int()},
		{loggerFn: "Ints", valueType: Index().Int()},
		{loggerFn: "Int8", valueType: Int8()},
		{loggerFn: "Ints8", valueType: Index().Int8()},
		{loggerFn: "Int16", valueType: Int16()},
		{loggerFn: "Ints16", valueType: Index().Int16()},
		{loggerFn: "Int32", valueType: Int32()},
		{loggerFn: "Ints32", valueType: Index().Int32()},
		{loggerFn: "Int64", valueType: Int64()},
		{loggerFn: "Ints64", valueType: Index().Int64()},
		{loggerFn: "Uint", valueType: Uint()},
		{loggerFn: "Uints", valueType: Index().Uint()},
		{loggerFn: "Uint8", valueType: Uint8()},
		{loggerFn: "Uints8", valueType: Index().Uint8()},
		{loggerFn: "Uint16", valueType: Uint16()},
		{loggerFn: "Uints16", valueType: Index().Uint16()},
		{loggerFn: "Uint32", valueType: Uint32()},
		{loggerFn: "Uints32", valueType: Index().Uint32()},
		{loggerFn: "Uint64", valueType: Uint64()},
		{loggerFn: "Uints64", valueType: Index().Uint64()},
		{loggerFn: "Float32", valueType: Float32()},
		{loggerFn: "Floats32", valueType: Index().Float32()},
		{loggerFn: "Float64", valueType: Float64()},
		{loggerFn: "Floats64", valueType: Index().Float64()},
		{loggerFn: "Time", valueType: Qual("time", "Time")},
		{loggerFn: "Times", valueType: Index().Qual("time", "Time")},
	}

	for _, fieldFunction := range fieldFunctions {
		loggerFn := fieldFunction.loggerFn
		zerologField := fieldFunction.zerologField
		if zerologField == "" {
			zerologField = loggerFn
		}
		f.Func().Params(
			Id("d").Op("*").Id("zerologLogData"),
		).Id(loggerFn).Params(
			Id("key").String(),
			Id("value").Add(fieldFunction.valueType),
		).Id("MsgData").Block(
			Return(Op("&").Id("zerologLogData").Values(
				Dict{
					Id("Event"): Id("d").Dot("Event").Dot(zerologField).Call(Id("key"), Id("value")),
				},
			)),
		).Line()
	}
	fmt.Printf("%#v", f)
}
